{"parts":[{"content":"Content is the most important thing on the web. Without it, all the javascript,\ncss, and shiny wouldn't mean a thing. It doesn't matter what backend system you\nuse, whether it's PHP, Java, .NET, Ruby, Python, or Node.js. Without content,\nthey have nothing to serve. The storage of this content is just as important as\nthe content itself, so perhaps it's time to come up with a new method for\nstoring it.\n\n<!-- more -->\n\nWhen I first started doing web development, I had absolutely no idea how the\ntechnologies that powered it worked. I understood what HTML and CSS were, but\nthings like PHP and MySQL baffled me. Eventually I did learn them and MySQL all\nof the sudden became this awesome thing I felt like I store anything in.\n\nOnce I started to work on the web more and develop my skills I quickly realized\nthat building custom tables and designing the database was less fun when you\nencountered larger problems. That's when I discovered Content Management\nSystems, specially Wordpress, Joomla, and Drupal. These systems took the work of\nfiguring out how to store data. They had nice GUI interfaces to build out the\ncontent model and add new fields like images and taxonomy.\n\nNow that I've been working in the web for a couple of years, I've begun to\nrealize that using MySQL to store content is like writing your term paper in\nexcel and having the professor compile all the papers into a massive excel file\nfor grading and storage. Then we build a shiny Word interface on top of it. But\nthe content is still being stored as an excel file. It worked though, so we used\nwhat we had.\n\nWe've taken it too far. Now we throw quite a bit of effort into scaling this\nsystem and throwing things in front of it to make it run faster (hello varnish).\nIt seems we've forgotten something important. The most important thing about the\nweb: the content. We've been focusing on making our content work for this\ntechnology that doesn't really suit it. MySQL, like Excel, isn't a bad piece of\ntechnology, it's actually an amazing piece of technology, just not for storing\ncontent. We write papers in Word for a reason.\n\nSometimes the tools we use for one task match up pretty well for another task.\nIn this case the same tools I use everyday to write code also fit well for\nstoring content. Content shouldn't exist associated directly to a page. It\nshould be a singular unit of information, regardless of the eventual display\nformat. We should have a history of our content. Different people should be able\nto work on the same content at the same time and be able to merge their changes.\nOur content should be easy to backup and safeguard, and it shouldn't care about\nbeing stored in a specific format. It should be indexable.\n\nI propose a new system. One that uses git for the content storage and history\ntracking and a document store for representation of the content. The document\nstore should also be able to index the content and it's associated metadata. The\nsystem we use should be able to read the content from the git version controlled\nfiles into the document store. The content interface should be focused on\ncollecting atomic units of content. The page paradigm doesn't fit the web. Our\npages are beginning to melt away, the use of technologies like pjax and spa\n(single page applications) is melting away the page refresh. Our content\nassembling system should be able to not only compile the content together, but\nactually relate the content. Google does this with ads, you visit a site and\nthen bam, that site's ads are on every other site because of google's ad\nnetwork. Advertising has found a way to make this work, but the web is not\nabout advertising . The web is about content.\n\nWe need to take this powerful technology and apply it to aspects of the web that\nhelp people. I'm not talking about corporate websites, the Apple websites of the\nworld are doing just fine. It's a common joke that the only thing that's on a\nuniversity's homepage that the user actually needs is the name of the\nuniversity. This problem reaches beyond universities to almost all non-profits.\nI think this comes from a fundamental misunderstanding that non-profits and\nuniversity's have that the private for-profit companies certainly do not. The\nuniversities and non-profits see the web as secondary. It's just a side benefit,\nnot the focus of funds or dedicated attention. Like many things, they often try\nto get it on the cheap and get it done fast. There's a core problem with this\nthinking, and it lies in the actual cost financially.\n\nI completely understand that non-profits don't usually have a large amount of\nfunding and that they wish to tackle the core of the problem they're trying to\nsolve. The problem comes in when the actual cost of a cheaply made website comes\nin. I've seen a number of these websites take twice as long if not more to\nadministrate. If we're talking about a web application used by everyone in the\ncompany, the amount of time you waste is most likely even more.\n\nThen, in the end, as with one of my recent projects, you higher a more expensive\nweb developer to fix up whatever it was that was broken. If the company had just\ngone with the second developer in the first place it would have cost the same,\nbut they wouldn't have had to pay for the first web developer's botch and the\nadditional time wasted by their employees.\n\nOf course this doesn't apply to all non-profits and it has really just been my\npersonal observation. Conversations with other developers have led me to believe\nI'm not the only one that sees it.\n\nWhat's the solution? A number of small improvements to what we use to build\nsites and web applications. It starts with the most important thing on the web:\nthe content. So let's build a better content storage and delivery system. One\nthat you can use with PHP, Ruby, Python, .NET, NodeJS, Java, or any other\nbackend. It's time we all start helping each other in as many ways as possible.\nThere is plenty of web for everyone, I assure you that.\n---\n","format":null}]}